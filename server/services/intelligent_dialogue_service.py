"""
Servi√ßo de Di√°logo Inteligente Avan√ßado
Implementa o prompt base estruturado em 3 etapas com Claude-Gemini
"""

import logging
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime
import json
import time
import random
try:
    import numpy as np
except ImportError:
    np = None

from .claude_service import ClaudeService
from .gemini_processor import GeminiProcessor
from .enhanced_rag_service import EnhancedRAGService
from .jurisprudence_analyzer import JurisprudenceAnalyzer
from .evidence_analyzer import EvidenceAnalyzer
from .enhanced_prompt_generator import EnhancedPromptGenerator
from .sectorial_sentence_generator import SectorialSentenceGenerator

class IntelligentDialogueService:
    """
    Orquestra di√°logo inteligente entre Claude e Gemini
    Segue o prompt base estruturado em 3 etapas
    """
    
    def __init__(self, case_id: str):
        self.case_id = case_id
        self.logger = logging.getLogger(__name__)
        
        # Servi√ßos especializados
        self.claude = ClaudeService()
        self.gemini = GeminiProcessor()
        self.rag = EnhancedRAGService(case_id)
        self.jurisprudence = JurisprudenceAnalyzer()
        self.evidence = EvidenceAnalyzer()
        self.prompt_generator = EnhancedPromptGenerator()
        self.sectorial_generator = SectorialSentenceGenerator(case_id)
        
        # Contexto do di√°logo
        self.dialogue_context = {
            "etapa_atual": 0,
            "dados_basicos": {},
            "resumo_processo": {},
            "analise_prova_oral": {},
            "fundamentacao_guiada": {},
            "dialogue_history": []
        }
    
    def executar_dialogo_completo(self, 
                                 texto_processo: str,
                                 transcricao_audiencia: Optional[str] = None) -> Dict[str, Any]:
        """
        Executa o di√°logo completo seguindo o prompt base estruturado
        
        Args:
            texto_processo: Texto completo do processo
            transcricao_audiencia: Transcri√ß√£o da audi√™ncia (opcional)
            
        Returns:
            Dict com resultado completo das 3 etapas
        """
        
        self.logger.info(f"[{self.case_id}] üéØ INICIANDO DI√ÅLOGO INTELIGENTE ESTRUTURADO")
        
        try:
            # ETAPA 1: Resumo Sistematizado 
            etapa1_resultado = self._executar_etapa_1_resumo_sistematizado(texto_processo)
            self._salvar_contexto_dialogo("ETAPA_1", etapa1_resultado)
            
            # ETAPA 2: An√°lise da Prova Oral
            etapa2_resultado = None
            if transcricao_audiencia:
                etapa2_resultado = self._executar_etapa_2_analise_prova_oral(
                    transcricao_audiencia, etapa1_resultado
                )
                self._salvar_contexto_dialogo("ETAPA_2", etapa2_resultado)
            
            # ETAPA 3: Fundamenta√ß√£o Guiada APRIMORADA
            # TEMPOR√ÅRIO: Usar m√©todo anterior at√© corrigir problemas
            etapa3_resultado = self._executar_etapa_3_fundamentacao_guiada(
                etapa1_resultado, etapa2_resultado
            )
            self._salvar_contexto_dialogo("ETAPA_3", etapa3_resultado)
            
            # Resultado final estruturado
            resultado_completo = {
                "case_id": self.case_id,
                "timestamp": datetime.now().isoformat(),
                "etapas_executadas": ["ETAPA_1", "ETAPA_2" if etapa2_resultado else None, "ETAPA_3"],
                "etapa_1_resumo": etapa1_resultado,
                "etapa_2_prova_oral": etapa2_resultado,
                "etapa_3_fundamentacao": etapa3_resultado,
                "sentenca_final": etapa3_resultado.get("sentenca_completa", "")
            }
            
            self.logger.info(f"[{self.case_id}] ‚úÖ DI√ÅLOGO INTELIGENTE CONCLU√çDO COM SUCESSO")
            return resultado_completo
            
        except Exception as e:
            self.logger.error(f"[{self.case_id}] ‚ùå Erro no di√°logo inteligente: {str(e)}")
            raise
    
    def _executar_etapa_1_resumo_sistematizado(self, texto_processo: str) -> Dict[str, Any]:
        """
        ETAPA 1: Resumo sistematizado das pe√ßas principais
        Implementa o prompt base espec√≠fico da Etapa 1
        """
        
        self.logger.info(f"[{self.case_id}] üìã EXECUTANDO ETAPA 1: RESUMO SISTEMATIZADO")
        
        # Prompt detalhado da Etapa 1 (exatamente como fornecido pelo usu√°rio)
        prompt_etapa_1 = """
### üìå *Objetivo*
Produzir um resumo sistematizado das pe√ßas de um *processo trabalhista*, assegurando que todas as informa√ß√µes essenciais para o deslinde da controv√©rsia sejam fornecidas.

### üìù **Instru√ß√µes*
ENTRADA: voc√™ receber√° de entrada uma das duas op√ß√µes abaixo:
1) arquivo contendo as seguintes pe√ßas do processo:
- Peti√ß√£o Inicial (reclama√ß√£o trabalhista);
- Contesta√ß√£o (defesa da(s) reclamada(s));
- R√©plica (impugna√ß√£o √† defesa);
- Ata de Audi√™ncia (depoimentos das partes e testemunhas).

ou

2) Um n√∫mero de processo do PJe contendo 20 d√≠gitos (Exemplo: 0100187-84.2023.5.01.0057).
Se for esse o caso, acione a ferramenta <Busca Processual> e execute as instru√ß√µes abaixo.

#Com base no processo informado, ou a partir do arquivo .pdf fornecido, siga *as diretrizes* abaixo para produzir um *resumo estruturado e objetivo*:

### * Etapa 0 - Informe os dados b√°sicos do processo:
1) data de admiss√£o:
2) data da dispensa:
3) Tempo do contrato:
4) Forma de desligamento:
5) remunera√ß√£o:
6) fun√ß√£o/atividade:

*Exiba essas 6 informa√ß√µes em formato de TABELA:
- colunas (peti√ß√£o inicial e contesta√ß√µes);
- linhas (Admiss√£o, Dispensa, Remunera√ß√£o, Fun√ß√£o)

**Antes da tabela acima, informe a **Data do ajuizamento da a√ß√£o**

### *üìä Etapa 1 - Elabora√ß√£o de resumo detalhada*
de cada um dos pedidos formulados na PETI√á√ÉO INICIAL, acompanhado das respectivas teses de defesa apresentadas em CONTESTA√á√ÉO.

- Para cada pedido formulado na PETI√á√ÉO INICIAL identifique a tese correspondente na CONTESTA√á√ÉO;

üìå **Organize as informa√ß√µes em formato de relat√≥rio de senten√ßa, adote o tempo verbal *presente do indicativo* (ex.: alega, aduz, sustenta...), e obede√ßa a formata√ß√£o a seguir:

##*üîπPRELIMINARES E PREJUDICIAIS DE M√âRITO*

1. V√° at√© cada uma da(s) contesta√ß√£o(√µes) da(s) de cada uma da(s) reclamada(s) e verifique se existem PRELIMINARES na contesta√ß√£o.

2. Exemplos mais comuns de *PRELIMINARES*:
‚óè DA INCOMPET√äNCIA DA JUSTI√áA DO TRABALHO
‚óè DA INCONSTITUCIONALIDADE DOS ARTIGOS
‚óè DA IN√âPCIA DA PETI√á√ÉO INICIAL
‚óè DA AUS√äNCIA DE LIQUIDA√á√ÉO DOS PEDIDOS
‚óè DA IMPUGNA√á√ÉO AO VALOR DA CAUSA
‚óè DA ILEGITIMIDADE DE PARTE (PARTE ILEG√çTIMA)
‚óè DA IMPOSSIBILIDADE JUR√çDICA DO PEDIDO
‚óè DA FALTA DE INTERESSE PROCESSUAL

10. Caso tenha sido alegada alguma Preliminar, organize essa(s) preliminares em **TEMAS* com a seguinte *ESTRUTURA*:

üîπDa ‚Å†*Nome da Preliminar‚Å†*
‚Å†*Resumir aqui os principais argumentos da preliminar de cada uma das contesta√ß√µes. Mencione qual reclamada alegou a preliminar.‚Å†*

##*DAS PREJUDICIAIS DE M√âRITO*

11. Depois das preliminares, voc√™ deve mencionar as PREJUDICIAIS DE M√âRITO.
12. V√° at√© cada uma da(s) contesta√ß√£o(√µes) de cada uma da(s) reclamada(s) e verifique se foi alegada alguma PREJUDICIAIS DE M√âRITO.
13. Veja alguns exemplos mais comuns de *PREJUDICIAIS DE M√âRITO* que podem aparecer nas contesta√ß√µes:
‚óè DA REVELIA DA RECLAMADA
‚óè DA PRESCRI√á√ÉO
‚óè DA PRESCRI√á√ÉO BIENAL
‚óè DA PRESCRI√á√ÉO QUINQUENAL (adotar modelo abaixo)
‚óè DA ADES√ÉO DO PDV (PLANO DE DEMISS√ÉO VOLUNT√ÅRIA)

14. Caso tenha sido alegada alguma PREJUDICIAL DE M√âRITO, organize-as em *TEMAS* com a seguinte *ESTRUTURA*:

üîπDo(a) ‚Å†*nome da prejudicial de m√©rito‚Å†*
{Resumir aqui os principais argumentos da prejudicial de m√©rito de cada uma das contesta√ß√µes. Mencione qual reclamada alegou a prejudicial de m√©rito}.
{Resumir aqui os principais argumentos do reclamante em rela√ß√£o a esta PREJUDICIAL_DE_M√âRITO. Extraia esses argumentos da *R√âPLICA* ou da *MANIFESTA√á√ÉO_√Ä_CONTESTA√á√ÉO* ou da *MANIFESTA√á√ÉO_√Ä_DEFESA* apresentada pelo(as) Reclamante.}

**M√âRITO**:
Esgotada a apresenta√ß√£o das preliminares e prejudiciais, passe para o exame de m√©rito dos pedidos, estruturando a resposta da seguinte forma:

**Do/a <T√≠tulo do Pedido>*
[Insira aqui os principais fundamentos da causa de pedir]
[Insira aqui os principais fundamentos da contesta√ß√£o]

#prossiga com essa estrutura at√© esgotar o √∫ltimo pedido
#organize os par√°grafos acima de forma a destinar um par√°grafo apenas as raz√µes da peti√ß√£o inicial e um segundo par√°grafo apenas para os fundamentos da contesta√ß√£o.
#ATEN√á√ÉO: se houver pedido de horas extras, insira no par√°grafo introdut√≥rio da fundamenta√ß√£o os hor√°rios da jornada informados na peti√ß√£o inicial.

- EXEMPLO:
"*Da justa causa*
O reclamante busca a revers√£o da justa causa, alegando que a dispensa foi injusta e sem motivo, pois o incidente que causou a demiss√£o (crian√ßas ligando o carrinho el√©trico) n√£o foi decorrente de mau procedimento ou des√≠dia. Explica que estava verificando um equipamento e deixou a chave na igni√ß√£o, mas o acidente foi causado por terceiros.

A reclamada sustenta que a dispensa por justa causa foi leg√≠tima devido √† neglig√™ncia do reclamante em n√£o retirar a chave do ve√≠culo, o que resultou em um acidente com clientes.

*Das horas extras*
O reclamante pleiteia o pagamento de horas extras, alegando que cumpria jornada das 8h30 √†s 18h, de segunda a quinta-feira, e das 8h √†s 19h √†s sextas-ferias, sem intervalo intrajornada.

Em defesa, a reclamada afirma que a jornada do reclamante era corretamente registrada em controle de ponto, e eventuais horas extras prestadas eram compensadas ou pagas."

### *üìä Etapa 2 - Elabora√ß√£o da Planilha com S√≠ntese do Processo*

üìå *Organize as informa√ß√µes em uma planilha* com os seguintes par√¢metros:

- *Linhas:*
- [Pedido 1] ‚áÑ [Defesa 1]
- [Pedido 2] ‚áÑ [Defesa 2]
- [Pedido 3] ‚áÑ [Defesa 3]
- ‚Ä¶ (Repita conforme necess√°rio)

- *Colunas:*
- *[Peti√ß√£o Inicial]* ‚Üí resumo de cada uma dos pedidos.
- *[Contesta√ß√£o]* ‚Üí teses defensivas para cada um dos pedidos.
- *[R√©plica]* ‚Üí impugna√ß√µes do reclamante √†s teses defensivas.

# Se houver mais de uma r√©, abrir uma nova coluna.

üö´ *Pedidos a serem ignorados*:
- Gratuidade de justi√ßa
- Honor√°rios advocat√≠cios
- Juros e corre√ß√£o monet√°ria
- Exibi√ß√£o de documentos

"__________________________ /1¬™ Etapa/ ___________________________"
"""

        # Claude executa a Etapa 1 com consulta ao RAG
        conhecimento_processo = self.rag.query_knowledge(
            query="estrutura b√°sica peti√ß√£o inicial contesta√ß√£o pedidos", 
            sources=["estilo_juiza", "caso_atual"],
            top_k=8
        )
        
        prompt_completo = f"""
{prompt_etapa_1}

TEXTO DO PROCESSO PARA AN√ÅLISE:
{texto_processo}

CONHECIMENTO DO RAG (consulte para manter estilo e estrutura):
{json.dumps(conhecimento_processo, indent=2, ensure_ascii=False)}

Execute a an√°lise seguindo EXATAMENTE o formato especificado acima.
"""
        
        # Gemini executa an√°lise estruturada
        response = self.gemini.model.generate_content(
            prompt_completo,
            generation_config=self.gemini.generation_config
        )
        
        resultado_etapa_1 = {
            "etapa": "ETAPA_1_RESUMO_SISTEMATIZADO",
            "timestamp": datetime.now().isoformat(),
            "dados_basicos_extraidos": True,
            "preliminares_identificadas": True,
            "prejudiciais_identificadas": True,
            "merito_analisado": True,
            "planilha_sintese_criada": True,
            "conteudo_completo": response.text,
            "prompt_utilizado": "PROMPT_BASE_ETAPA_1_ORIGINAL"
        }
        
        self.dialogue_context["etapa_atual"] = 1
        self.dialogue_context["resumo_processo"] = resultado_etapa_1
        
        return resultado_etapa_1
    
    def _executar_etapa_2_analise_prova_oral(self, 
                                           transcricao_audiencia: str,
                                           contexto_etapa_1: Dict[str, Any]) -> Dict[str, Any]:
        """
        ETAPA 2: An√°lise da Ata de Audi√™ncia 
        Implementa o prompt base espec√≠fico da Etapa 2
        """
        
        self.logger.info(f"[{self.case_id}] üé§ EXECUTANDO ETAPA 2: AN√ÅLISE PROVA ORAL")
        
        # Prompt detalhado da Etapa 2 (exatamente como fornecido pelo usu√°rio)
        prompt_etapa_2 = """
üìå **Etapa 3 - An√°lise da Ata de Audi√™ncia**

ATEN√á√ÉO: pode acontecer dos depoimentos serem anexados por meio de uma CERTID√ÉO, logo ap√≥s a ATA DE AUDIC√äNCIA. Essa verifica√ß√£o √© crucial.

Caso os depoimentos das partes n√£o sejam localizados na ATA DE AUDI√äNCIA, verifique o conte√∫do da CERTID√ÉO que acompanha a ATA DE AUDI√äNCIA. Caso n√£o haja a certid√£o, antes da an√°lise da ata, solicitar ao usu√°rio a inser√ß√£o dos depoimentos de audi√™ncia de forma transcrita.

1Ô∏è‚É£ *An√°lise Inicial*
- Leia *integralmente* os depoimentos fornecidos.
- Fa√ßa isso *em sil√™ncio*, sem gerar resposta nesta etapa.

2Ô∏è‚É£ **Identifica√ß√£o de Pontos Controvertidos*
#Identifique as quest√µes em disputa no processo.
#Exemplos comuns na esfera trabalhista:
- Horas extras
- Intervalos intrajornada
- Sal√°rio "por fora" / extrafolha
- Ass√©dio moral
- Idoneidade dos controles de frequ√™ncia
- Outros pontos controvertidos podem ser detectados.

3Ô∏è‚É£ *Cria√ß√£o da Tabela Resumo*
- Elabore uma *tabela sistematizada* com o que cada depoente afirmou sobre os *pontos controvertidos*.

4Ô∏è‚É£ **Atualiza√ß√£o da Tabela (se necess√°rio)*
- Caso surjam *novos pontos controvertidos*, **refa√ßa* a tabela incluindo-os.

### *üìä Formato da Tabela de Sa√≠da:*

| Ponto Controvertido | Depoente 1 | Depoente 2 | Depoente 3 |
|---------------------|------------|------------|------------|
| Horas extras | [Resumo do depoimento] | [Resumo do depoimento] | [Resumo do depoimento] |
| Intervalos intrajornada | [Resumo do depoimento] | [Resumo do depoimento] | [Resumo do depoimento] |
| ... | ... | ... | ... |

### *üìå Etapa Final - Relat√≥rio anal√≠tico*
- Ap√≥s a tabela, fa√ßa um relat√≥rio individualizado de cada depoimento, destacando os pontos de converg√™ncia e diverg√™ncia em rela√ß√£o ao depoimento do autor.
- Seja bastante anal√≠tico e completo nesta etapa;
- D√™ maior destaque para eventuais *inconsist√™ncias, diverg√™ncias ou contradi√ß√µes* entre os depoimentos:
- Procure e mencione eventuais contradi√ß√µes internas nos depoimentos: ou seja, identifique trechos (se houver) em que o depoente declarou algo que conflita com algo anteriormente falado por este mesmo depoente.

üìå *Observa√ß√µes finais:*
#DIRETRIZES ESPECIAIS
- Voc√™ deve observar, em especial, as seguintes diretrizes, sem prejudicar a tecnicidade jur√≠dica do texto:
1. Use conectores para criar transi√ß√µes suaves entre frases e par√°grafos, guiando o leitor.
2. Evite frases excessivamente longas, mas varie o ritmo para evitar monotonia.
3. Retire repeti√ß√µes ou palavras/frases desnecess√°rias.
4. Demonstre autoridade no tema e seja consistente no tom, sem perder a eleg√¢ncia.
5. Termine cada par√°grafo preparando o terreno para o pr√≥ximo.
6. Use sin√¥nimos para evitar repeti√ß√µes, mas mantenha a simplicidade quando necess√°rio.
7. Cheque a l√≥gica das ideias.
8. Averigue a fluidez do racioc√≠nio e a concatena√ß√£o das ideias. Certifique-se de que as ideias est√£o conectadas de forma natural, como degraus em uma escada.
9. Seja direto e claro. Simplifique.
10. Evite blocos de texto muito densos. Facilite a leitura.

Esse prompt garante uma abordagem *estruturada, objetiva e completa* para analisar o processo trabalhista.‚öñÔ∏èüìÑ

"__________________________ // ___________________________"
"""

        # Recuperar conhecimento sobre an√°lise de prova oral
        conhecimento_prova = self.rag.query_knowledge(
            query="an√°lise depoimentos pontos controvertidos prova oral audi√™ncia",
            sources=["estilo_juiza", "dialogo_contexto"],
            top_k=5
        )
        
        prompt_completo = f"""
{prompt_etapa_2}

CONTEXTO DA ETAPA 1 (use para entender os pedidos e pontos em disputa):
{contexto_etapa_1.get('conteudo_completo', '')[:2000]}

TRANSCRI√á√ÉO DA AUDI√äNCIA PARA AN√ÅLISE:
{transcricao_audiencia}

CONHECIMENTO DO RAG (consulte para manter estilo de an√°lise):
{json.dumps(self._convert_to_serializable(conhecimento_prova), indent=2, ensure_ascii=False)}

Execute a an√°lise seguindo EXATAMENTE o formato especificado acima.
"""
        
        # Claude executa an√°lise da prova oral
        try:
            response = self._claude_request(
                system=self.claude.system_prompt,
                user=prompt_completo,
                max_tokens=self.claude.max_tokens,
                temperature=self.claude.temperature
            )
            
            resultado_etapa_2 = {
                "etapa": "ETAPA_2_ANALISE_PROVA_ORAL",
                "timestamp": datetime.now().isoformat(),
                "pontos_controvertidos_identificados": True,
                "tabela_depoimentos_criada": True,
                "relatorio_analitico_completo": True,
                "contradicoes_internas_verificadas": True,
                "conteudo_completo": response.content[0].text,
                "prompt_utilizado": "PROMPT_BASE_ETAPA_2_ORIGINAL"
            }
            
            self.dialogue_context["etapa_atual"] = 2
            self.dialogue_context["analise_prova_oral"] = resultado_etapa_2
            
            return resultado_etapa_2
            
        except Exception as e:
            self.logger.error(f"Erro na Etapa 2: {str(e)}")
            raise
    
    def _executar_etapa_3_fundamentacao_guiada(self,
                                              contexto_etapa_1: Dict[str, Any],
                                              contexto_etapa_2: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """
        ETAPA 3: Fundamenta√ß√£o Guiada com DI√ÅLOGO INTELIGENTE Claude ‚Üî Gemini  
        Claude atua como Juiz fazendo perguntas espec√≠ficas
        Gemini atua como Assessor fornecendo an√°lises detalhadas
        """
        
        self.logger.info(f"[{self.case_id}] ‚öñÔ∏è EXECUTANDO ETAPA 3: FUNDAMENTA√á√ÉO GUIADA COM DI√ÅLOGO INTELIGENTE")
        
        # Prompt detalhado da Etapa 3 (aprimorado com base na senten√ßa exemplo)
        prompt_etapa_3_template = r"""
# üèõÔ∏è OBJETIVO
Redigir uma SENTEN√áA TRABALHISTA COMPLETA, tecnicamente articulada, seguindo rigorosamente o estilo e formata√ß√£o da ju√≠za, com an√°lise probat√≥ria detalhada e fundamenta√ß√£o jur√≠dica robusta.

# ‚úçÔ∏è ESTILO E FORMATA√á√ÉO OBRIGAT√ìRIOS
‚Ä¢ ESTRUTURA: SENTEN√áA ‚Üí RELAT√ìRIO ‚Üí FUNDAMENTA√á√ÉO ‚Üí DISPOSITIVO
‚Ä¢ SEM numera√ß√£o romana, SEM hashtags markdown
‚Ä¢ T√≠tulos das se√ß√µes em MAI√öSCULAS puras
‚Ä¢ Subt√≥picos em MAI√öSCULAS sem numera√ß√£o (ex: JORNADA ‚Äì HORAS EXTRAS)
‚Ä¢ Use "√â o relat√≥rio. Decide-se." como transi√ß√£o
‚Ä¢ Linguagem formal, t√©cnica, conectores sofisticados
‚Ä¢ Sempre referencie documentos por (ID xxx) ou (id. xxx)

# üìë CONTEXTO PROCESSUAL COMPLETO
1. *Resumo sistematizado* ‚Üí {{RESUMO_PROCESSO}}
2. *An√°lise da prova oral* ‚Üí {{PROVA_ORAL}}
3. *Documentos juntados* ‚Üí {{OUTRAS_PROVAS}}

# üéØ DIRETRIZES ESPEC√çFICAS DE AN√ÅLISE
‚Ä¢ **AN√ÅLISE PROBAT√ìRIA DETALHADA**: Examine cada testemunha individualmente
‚Ä¢ **CONTRADI√á√ïES**: Identifique e comente discrep√¢ncias entre depoimentos
‚Ä¢ **√îNUS DA PROVA**: Sempre mencione art. 818, I, da CLT e art. 373, I/II, do CPC
‚Ä¢ **PRESUN√á√ïES**: Analise validade de documentos e suas presun√ß√µes
‚Ä¢ **JURISPRUD√äNCIA**: Cite S√∫mulas, OJs, decis√µes do STF (com modula√ß√£o temporal)

# üìù ESTRUTURA OBRIGAT√ìRIA DA SENTEN√áA

**SENTEN√áA**

**RELAT√ìRIO**
[NOME], qualificado na inicial, ajuizou a presente reclama√ß√£o trabalhista em face de [EMPRESA], alegando ter sido admitido em [data], na fun√ß√£o de [fun√ß√£o] e dispensado em [data]. Postula [listar pedidos]. Atribuiu √† causa o valor de R\$ [valor].

A reclamada, em contesta√ß√£o (ID [id]), defendeu-se alegando [resumo defesa] e pugnou pela improced√™ncia total dos pedidos.

O reclamante apresentou r√©plica (ID [id]), impugnando [pontos] e reiterando os termos da inicial.

Em audi√™ncia de instru√ß√£o (Ata ID [id]), foram ouvidas [n√∫mero] testemunhas, [detalhes]. 

Raz√µes finais remissivas. Rejeitada a proposta final de concilia√ß√£o.

√â o relat√≥rio. Decide-se.

**FUNDAMENTA√á√ÉO**

**[T√ìPICO 1 EM MAI√öSCULAS]**
[An√°lise detalhada com:]
- Alega√ß√µes das partes
- Prova documental (com IDs)
- Depoimento de cada testemunha individualmente
- An√°lise de contradi√ß√µes
- Fundamenta√ß√£o legal espec√≠fica
- Conclus√£o (Ante o exposto, acolho/rejeito o pedido...)

[Repetir para cada pedido]

**DISPOSITIVO**
Ante o exposto, e por tudo mais que dos autos consta, decido, na Reclama√ß√£o Trabalhista ajuizada por [NOME], em face de [EMPRESA], julgar [PROCEDENTES/IMPROCEDENTES/PROCEDENTES EM PARTE] os pedidos formulados, para, nos termos da fundamenta√ß√£o:

[Listar condena√ß√µes espec√≠ficas]

Concedo/Nego √† reclamante os benef√≠cios da justi√ßa gratuita.
Defiro honor√°rios de sucumb√™ncia, na forma da fundamenta√ß√£o.
Custas [especificar].
Intimem-se as partes.
Nada mais.

# üîñ REQUISITOS JUR√çDICOS OBRIGAT√ìRIOS
‚Ä¢ **SEMPRE citar**: Dispositivos CLT, CF/88, CPC com numera√ß√£o exata
‚Ä¢ **Jurisprud√™ncia espec√≠fica**: S√∫mulas TST, OJs, decis√µes STF com datas
‚Ä¢ **Modula√ß√£o temporal**: Para decis√µes STF, mencionar efic√°cia ex nunc/ex tunc
‚Ä¢ **IDs dos documentos**: Sempre referenciar (ID xxx) ou (id. xxx)
‚Ä¢ **An√°lise √¥nus probat√≥rio**: art. 818, I, CLT + art. 373, I/II, CPC

##ATEN√á√ÉO ESPECIAL: Formata√ß√£o e Valores
‚Ä¢ **SEM Markdown**: N√£o use #, ##, *** - apenas MAI√öSCULAS para t√≠tulos
‚Ä¢ **Cifr√£o**: SEMPRE use R\$ (com barra invertida)
‚Ä¢ **IDs**: Sempre mencione (ID xxx) para documentos
‚Ä¢ **Extens√£o**: M√≠nimo 5.000 caracteres, an√°lise detalhada obrigat√≥ria
‚Ä¢ **Estilo da ju√≠za**: Use conectores sofisticados, an√°lise minuciosa de provas
"""
        
        # Recuperar conhecimento espec√≠fico para fundamenta√ß√£o completa
        conhecimento_fundamentacao = self.rag.query_knowledge(
            query="fundamenta√ß√£o jur√≠dica dispositivos legais CLT precedentes TST an√°lise probat√≥ria depoimentos",
            sources=["estilo_juiza", "caso_atual", "dialogo_contexto"],
            top_k=15
        )
        
        # Preparar contexto das etapas anteriores
        resumo_processo = contexto_etapa_1.get('conteudo_completo', '')
        prova_oral = contexto_etapa_2.get('conteudo_completo', '') if contexto_etapa_2 else "N√£o foi realizada an√°lise de prova oral."
        
        # DI√ÅLOGO INTELIGENTE: Claude faz perguntas espec√≠ficas para Gemini
        self.logger.info(f"[{self.case_id}] ü§ù INICIANDO DI√ÅLOGO CLAUDE ‚Üî GEMINI")
        
        # FASE 1: Claude solicita extra√ß√£o de dados espec√≠ficos do Gemini
        prompt_claude_questoes = f"""
Voc√™ √© um JUIZ DO TRABALHO experiente que precisa redigir uma senten√ßa. 

Baseado no resumo do processo e prova oral abaixo, fa√ßa 5 PERGUNTAS ESPEC√çFICAS para seu assessor t√©cnico (Gemini) extrair automaticamente do processo original todas as informa√ß√µes necess√°rias para eliminar placeholders:

RESUMO DISPON√çVEL:
{resumo_processo[:2000]}

PROVA ORAL DISPON√çVEL:
{prova_oral[:1000] if prova_oral else 'N√£o dispon√≠vel'}

FORMULE EXATAMENTE 8 PERGUNTAS T√âCNICAS ESPEC√çFICAS para extrair:
1. Dados completos das partes (nomes, qualifica√ß√µes, CNPJ/CPF, endere√ßos completos)
2. Datas precisas (admiss√£o, dispensa, ajuizamento) e n√∫meros de processo
3. Valores espec√≠ficos (sal√°rio, valor da causa, todos os pedidos com valores)
4. IDs ESPEC√çFICOS de todos os documentos mencionados (contesta√ß√£o, r√©plica, ata, etc.)
5. Depoimentos COMPLETOS de cada testemunha individualmente com contradi√ß√µes
6. Documentos probat√≥rios espec√≠ficos (relat√≥rios de viagem, cart√µes de ponto, etc.) com IDs
7. Normas coletivas aplic√°veis e cl√°usulas espec√≠ficas mencionadas
8. Detalhes de procedimentos (hor√°rios, rotinas, equipamentos) conforme depoimentos

FORMATO DA RESPOSTA:
PERGUNTA 1: [pergunta espec√≠fica]
PERGUNTA 2: [pergunta espec√≠fica]
PERGUNTA 3: [pergunta espec√≠fica]
PERGUNTA 4: [pergunta espec√≠fica]
PERGUNTA 5: [pergunta espec√≠fica]
"""
        
        # Claude gera as perguntas
        response_claude_questoes = self._claude_request(
            system=self.claude.system_prompt,
            user=prompt_claude_questoes,
            max_tokens=2000,
            temperature=0.1
        )
        
        questoes_claude = response_claude_questoes.content[0].text
        self.logger.info(f"[{self.case_id}] ‚ùì Claude gerou 5 quest√µes espec√≠ficas")
        
        # FASE 2: Gemini responde √†s perguntas espec√≠ficas do Claude
        prompt_gemini_respostas = f"""
Voc√™ √© um ASSESSOR T√âCNICO JUR√çDICO especializado em extrair informa√ß√µes precisas de processos trabalhistas.

O Juiz respons√°vel pelo caso fez as seguintes perguntas espec√≠ficas que voc√™ deve responder com base no texto COMPLETO do processo:

{questoes_claude}

TEXTO COMPLETO DO PROCESSO PARA AN√ÅLISE:
{resumo_processo[:20000] + '...' if len(resumo_processo) > 20000 else resumo_processo}

TEXTO ORIGINAL DO PROCESSO (para extra√ß√£o precisa):
{self._recuperar_texto_original_processo()}

TRANSCRI√á√ÉO DA AUDI√äNCIA:
{prova_oral if prova_oral else 'N√£o realizada'}

INSTRU√á√ïES ESPEC√çFICAS:
- Extraia APENAS informa√ß√µes que est√£o EXPLICITAMENTE no texto
- Para nomes: forne√ßa nome completo quando dispon√≠vel
- Para datas: use formato DD/MM/AAAA
- Para valores: use formato R$ XX.XXX,XX
- Para IDs: mencione exatamente como aparecem nos autos
- Se n√£o encontrar informa√ß√£o espec√≠fica, responda "N√ÉO INFORMADO"

RESPONDA CADA PERGUNTA INDIVIDUALMENTE COM M√ÅXIMA PRECIS√ÉO:
RESPOSTA 1: [dados completos das partes]
RESPOSTA 2: [datas e n√∫meros precisos]
RESPOSTA 3: [valores espec√≠ficos e detalhados]
RESPOSTA 4: [IDs exatos de TODOS os documentos]
RESPOSTA 5: [depoimentos LITERAIS de cada testemunha]
RESPOSTA 6: [documentos probat√≥rios espec√≠ficos com IDs]
RESPOSTA 7: [normas coletivas e cl√°usulas precisas]
RESPOSTA 8: [procedimentos detalhados conforme prova oral]
"""
        
        # Gemini responde √†s perguntas espec√≠ficas
        gemini_response = self.gemini.model.generate_content(
            prompt_gemini_respostas,
            generation_config=self.gemini.generation_config
        )
        
        respostas_gemini = gemini_response.text
        self.logger.info(f"[{self.case_id}] üí° Gemini forneceu respostas detalhadas")
        
        # FASE 3: Claude usa as respostas do Gemini para gerar senten√ßa completa
        try:
            sentenca_longform = self._gerar_sentenca_longform(
                prompt_base=prompt_etapa_3_template,
                resumo_processo=resumo_processo,
                prova_oral=prova_oral,
                conhecimento_fundamentacao=self._convert_to_serializable(conhecimento_fundamentacao),
                questoes_claude=questoes_claude,
                respostas_gemini=respostas_gemini,
                alvo_caracteres_total=15000
            )

            resultado_etapa_3 = {
                "etapa": "ETAPA_3_FUNDAMENTACAO_GUIADA",
                "timestamp": datetime.now().isoformat(),
                "fundamentacao_juridica_completa": True,
                "citacoes_legais_incluidas": True,
                "estrutura_sentenca_seguida": True,
                "estilo_juiza_aplicado": True,
                "sentenca_completa": sentenca_longform,
                "prompt_utilizado": "PROMPT_BASE_ETAPA_3_ORIGINAL_LONGFORM"
            }

            self.dialogue_context["etapa_atual"] = 3
            self.dialogue_context["fundamentacao_guiada"] = resultado_etapa_3

            return resultado_etapa_3
        except Exception as e:
            self.logger.error(f"Erro na Etapa 3: {str(e)}")
            raise
    
    def _convert_to_serializable(self, obj):
        """Converte objetos numpy e outros tipos n√£o serializ√°veis para JSON"""
        if isinstance(obj, dict):
            return {k: self._convert_to_serializable(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [self._convert_to_serializable(item) for item in obj]
        elif np and isinstance(obj, (np.float32, np.float64)):
            return float(obj)
        elif np and isinstance(obj, (np.int32, np.int64)):
            return int(obj)
        elif np and isinstance(obj, np.ndarray):
            return obj.tolist()
        else:
            return obj

    def _recuperar_texto_original_processo(self) -> str:
        """Recupera o texto original otimizado para evitar timeouts do Gemini"""
        try:
            from pathlib import Path
            case_dir = Path(__file__).parent.parent / "storage" / self.case_id
            processo_path = case_dir / "processo_extraido.txt"
            
            if processo_path.exists():
                texto_original = processo_path.read_text(encoding='utf-8')
                # Limitar a 30k caracteres para evitar timeout do Gemini
                if len(texto_original) > 30000:
                    # Pegar in√≠cio e fim do texto para manter contexto
                    inicio = texto_original[:15000]
                    fim = texto_original[-15000:]
                    return f"{inicio}\n\n[... TEXTO TRUNCADO PARA OTIMIZA√á√ÉO ...]\n\n{fim}"
                return texto_original
            else:
                return "TEXTO ORIGINAL N√ÉO DISPON√çVEL"
        except Exception as e:
            self.logger.error(f"Erro ao recuperar texto original: {str(e)}")
            return "ERRO AO ACESSAR TEXTO ORIGINAL"
    
    def _salvar_contexto_dialogo(self, etapa: str, resultado: Dict[str, Any]):
        """Salva contexto do di√°logo no RAG para consultas futuras"""
        
        # Converter resultado para formato serializ√°vel
        resultado_serializavel = self._convert_to_serializable(resultado)
        
        self.rag.save_dialogue_context(
            question=f"Execu√ß√£o da {etapa}",
            answer=json.dumps(resultado_serializavel, ensure_ascii=False),
            dialogue_step=self.dialogue_context["etapa_atual"]
        )
        
        self.dialogue_context["dialogue_history"].append({
            "etapa": etapa,
            "timestamp": datetime.now().isoformat(),
            "resultado": resultado_serializavel
        })
    
    def _executar_etapa_3_fundamentacao_aprimorada(self, etapa1_resultado: Dict[str, Any], 
                                                  etapa2_resultado: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """
        ETAPA 3 APRIMORADA: Fundamenta√ß√£o com an√°lise jurisprudencial e probat√≥ria avan√ßada
        """
        
        self.logger.info(f"[{self.case_id}] ‚öñÔ∏è EXECUTANDO ETAPA 3 APRIMORADA: FUNDAMENTA√á√ÉO COM AN√ÅLISE ESPECIALIZADA")
        
        try:
            # 1. EXTRAIR DADOS ESTRUTURADOS DO PROCESSO
            dados_processo = self._extrair_dados_estruturados_completos()
            
            # 2. AN√ÅLISE JURISPRUDENCIAL ESPECIALIZADA
            analise_jurisprudencial = self._executar_analise_jurisprudencial(dados_processo)
            
            # 3. AN√ÅLISE PROBAT√ìRIA DETALHADA
            analise_probatoria = self._executar_analise_probatoria(dados_processo)
            
            # 4. RECUPERAR CONTEXTO RAG ESPEC√çFICO
            contexto_rag = self._recuperar_contexto_rag_especifico(dados_processo)
            
            # 5. GERAR PROMPT APRIMORADO
            prompt_aprimorado = self.prompt_generator.gerar_prompt_fundamentacao_completa(
                dados_processo=dados_processo,
                analise_jurisprudencia=analise_jurisprudencial,
                analise_provas=analise_probatoria,
                contexto_rag=contexto_rag
            )
            
            # 6. EXECUTAR CLAUDE COM PROMPT APRIMORADO
            response = self._claude_request(
                system=self.claude.system_prompt,
                user=prompt_aprimorado,
                max_tokens=self.claude.max_tokens,
                temperature=0.1
            )
            
            resultado_aprimorado = {
                "etapa": "ETAPA_3_FUNDAMENTACAO_APRIMORADA",
                "timestamp": datetime.now().isoformat(),
                "dados_processo_extraidos": dados_processo,
                "analise_jurisprudencial": analise_jurisprudencial,
                "analise_probatoria": analise_probatoria,
                "sentenca_completa": response.content[0].text,
                "metrica_qualidade": self._calcular_metrica_qualidade(response.content[0].text),
                "utilizou_analise_especializada": True
            }
            
            self.logger.info(f"[{self.case_id}] ‚úÖ ETAPA 3 APRIMORADA CONCLU√çDA - Qualidade: {resultado_aprimorado['metrica_qualidade']}")
            return resultado_aprimorado
            
        except Exception as e:
            self.logger.error(f"[{self.case_id}] ‚ùå Erro na Etapa 3 Aprimorada: {str(e)}")
            # Fallback para m√©todo original
            return self._executar_etapa_3_fundamentacao_guiada(etapa1_resultado, etapa2_resultado)
    
    def _extrair_dados_estruturados_completos(self) -> Dict[str, Any]:
        """Extrai dados estruturados usando o Gemini aprimorado"""
        
        try:
            texto_processo = self._recuperar_texto_original_processo()
            
            # Usar Gemini com prompt aprimorado para extra√ß√£o completa
            processo_estruturado = self.gemini.extrair_informacoes_processo(texto_processo)
            
            return {
                "numero_processo": processo_estruturado.numero_processo,
                "partes": [{"nome": p.nome, "tipo": p.tipo, "qualificacao": p.qualificacao} for p in processo_estruturado.partes],
                "pedidos": [{"descricao": p.descricao, "categoria": p.categoria, "valor_estimado": p.valor_estimado} for p in processo_estruturado.pedidos],
                "testemunhas": [{"nome": t.nome, "parte_convite": t.parte_convite, "resumo_depoimento": t.resumo_depoimento} for t in processo_estruturado.testemunhas],
                "periodo_contratual": processo_estruturado.periodo_contratual,
                "valor_causa": processo_estruturado.valor_causa,
                "funcao_cargo": processo_estruturado.funcao_cargo,
                "jurisprudencias_citadas": processo_estruturado.jurisprudencias_citadas
            }
        except Exception as e:
            self.logger.error(f"Erro na extra√ß√£o de dados: {str(e)}")
            return {}
    
    def _executar_analise_jurisprudencial(self, dados_processo: Dict[str, Any]) -> Dict[str, Any]:
        """Executa an√°lise jurisprudencial especializada"""
        
        analise_completa = {}
        
        # Verificar se √© motorista para aplicar Lei 13.103/2015
        funcao = dados_processo.get("funcao_cargo", "").lower()
        if "motorista" in funcao:
            periodo_inicio = dados_processo.get("periodo_contratual", "").split(" a ")[0] if dados_processo.get("periodo_contratual") else ""
            periodo_fim = dados_processo.get("periodo_contratual", "").split(" a ")[-1] if dados_processo.get("periodo_contratual") else ""
            
            if periodo_inicio and periodo_fim:
                analise_completa["lei_motoristas"] = self.jurisprudence.analisar_lei_motoristas(periodo_inicio, periodo_fim)
        
        # An√°lise de controle de jornada
        # Assumindo empresa com mais de 20 empregados (dados reais precisariam ser extra√≠dos)
        analise_completa["controle_jornada"] = self.jurisprudence.analisar_jornada_controle(
            tem_mais_20_empregados=True,
            controles_apresentados=True,  # Verificar nos dados reais
            jornada_alegada=dados_processo.get("jornada_alegada", "")
        )
        
        return analise_completa
    
    def _executar_analise_probatoria(self, dados_processo: Dict[str, Any]) -> Dict[str, Any]:
        """Executa an√°lise probat√≥ria detalhada"""
        
        analise_completa = {}
        
        # An√°lise de testemunhas
        testemunhas = dados_processo.get("testemunhas", [])
        if testemunhas:
            analise_completa["analise_testemunhas"] = self.evidence.analisar_depoimentos_testemunhas(testemunhas)
        
        # An√°lise de √¥nus da prova para pedidos principais
        pedidos = dados_processo.get("pedidos", [])
        analise_onus = {}
        
        for pedido in pedidos:
            categoria = pedido.get("categoria", "")
            if categoria:
                analise_onus[categoria] = self.evidence.analisar_onus_proba(
                    pedido=categoria,
                    parte_interessada="requerente",
                    provas_apresentadas=[]  # Dados reais precisariam ser extra√≠dos
                )
        
        analise_completa["onus_proba"] = analise_onus
        return analise_completa
    
    def _recuperar_contexto_rag_especifico(self, dados_processo: Dict[str, Any]) -> str:
        """Recupera contexto RAG espec√≠fico para o caso"""
        
        # Construir query baseada nos pedidos e caracter√≠sticas do caso
        funcao = dados_processo.get("funcao_cargo", "")
        pedidos = [p.get("categoria", "") for p in dados_processo.get("pedidos", [])]
        
        query_elementos = [funcao] + pedidos + ["jurisprud√™ncia", "fundamenta√ß√£o", "estilo da ju√≠za"]
        query = " ".join(query_elementos)
        
        conhecimento = self.rag.query_knowledge(
            query=query,
            sources=["estilo_juiza", "caso_atual", "dialogo_contexto"],
            top_k=20
        )
        
        return json.dumps(self._convert_to_serializable(conhecimento), indent=2, ensure_ascii=False)
    
    def _calcular_metrica_qualidade(self, sentenca: str) -> Dict[str, Any]:
        """Calcula m√©tricas de qualidade da senten√ßa gerada"""
        
        return {
            "tamanho_caracteres": len(sentenca),
            "tamanho_palavras": len(sentenca.split()),
            "tem_estrutura_completa": all(secao in sentenca.upper() for secao in ["RELAT√ìRIO", "FUNDAMENTA√á√ÉO", "DISPOSITIVO"]),
            "menciona_jurisprudencia": "TST" in sentenca or "STF" in sentenca,
            "cita_dispositivos_legais": "CLT" in sentenca or "CF/88" in sentenca,
            "qualidade_estimada": "alta" if len(sentenca) > 10000 else "m√©dia" if len(sentenca) > 5000 else "baixa"
        }

    def _executar_etapa_3_sentenca_sectorial(self, dados_processo, transcricao_audiencia) -> Dict[str, Any]:
        """
        NOVA ABORDAGEM: Gera√ß√£o sectorial especializada para senten√ßas completas
        Resolve limita√ß√µes de contexto e gera senten√ßas com n√≠vel de detalhamento real
        """
        self.logger.info(f"[{self.case_id}] NOVA ABORDAGEM: Iniciando gera√ß√£o sectorial especializada")
        
        try:
            # Usa o novo gerador sectorial
            sentenca_completa = self.sectorial_generator.gerar_sentenca_completa(
                self.case_id, dados_processo, transcricao_audiencia
            )
            
            # Calcula m√©tricas de qualidade
            metricas = self._calcular_metricas_sentenca_sectorial(sentenca_completa, dados_processo)
            
            self.logger.info(f"[{self.case_id}] Senten√ßa sectorial gerada: {len(sentenca_completa)} caracteres")
            self.logger.info(f"[{self.case_id}] M√©tricas de qualidade: {metricas}")
            
            return {
                "sentenca_gerada": sentenca_completa,
                "metodo": "sectorial_especializado",
                "caracteres": len(sentenca_completa),
                "metricas_qualidade": metricas,
                "status": "sucesso"
            }
            
        except Exception as e:
            self.logger.error(f"[{self.case_id}] Erro na gera√ß√£o sectorial: {str(e)}")
            # Em caso de erro, usar m√©todo mais simples
            return {
                "sentenca_gerada": "Erro na gera√ß√£o sectorial. Sistema em modo de recupera√ß√£o.",
                "metodo": "fallback_erro",
                "caracteres": 0,
                "status": "erro",
                "erro": str(e)
            }
    
    def _calcular_metricas_sentenca_sectorial(self, sentenca: str, dados_processo) -> Dict[str, Any]:
        """Calcula m√©tricas de qualidade da senten√ßa gerada pela abordagem sectorial"""
        return {
            "caracteres_total": len(sentenca),
            "palavras_total": len(sentenca.split()),
            "secoes_identificadas": sentenca.count("##") + sentenca.count("DAS ") + sentenca.count("DO "),
            "citacoes_legais": sentenca.count("CLT") + sentenca.count("TST") + sentenca.count("S√∫mula"),
            "pedidos_cobertos": len([p for p in dados_processo.pedidos if p.categoria.lower() in sentenca.lower()]),
            "nivel_detalhamento": "ALTO" if len(sentenca) > 15000 else "M√âDIO" if len(sentenca) > 8000 else "BAIXO"
        }

    # -------------------------
    # GERA√á√ÉO LONG-FORM SECCIONADA
    # -------------------------
    def _gerar_sentenca_longform(self,
                                 prompt_base: str,
                                 resumo_processo: str,
                                 prova_oral: str,
                                 conhecimento_fundamentacao: Dict[str, Any],
                                 questoes_claude: str,
                                 respostas_gemini: str,
                                 alvo_caracteres_total: int = 15000) -> str:
        """
        Gera a senten√ßa completa por se√ß√µes com la√ßo de continua√ß√£o at√© atingir um alvo m√≠nimo de caracteres.
        Mant√©m o Prompt Base e evita repeti√ß√µes/cabe√ßalhos duplicados.
        """
        contexto_comum = f"""
{prompt_base}

CONTEXTO PROCESSUAL ESPEC√çFICO:
{{RESUMO_PROCESSO}} = {resumo_processo}
{{PROVA_ORAL}} = {prova_oral if prova_oral else 'N√£o foi realizada an√°lise de prova oral.'}
{{OUTRAS_PROVAS}} = Consulte o conhecimento do RAG para identificar documentos relevantes.

INFORMA√á√ïES EXTRA√çDAS PELO ASSESSOR T√âCNICO (GEMINI):
QUEST√ïES SOLICITADAS:
{questoes_claude}

RESPOSTAS ESPEC√çFICAS:
{respostas_gemini}

CONHECIMENTO DO RAG (jurisprud√™ncia e estilo):
{json.dumps(conhecimento_fundamentacao, indent=2, ensure_ascii=False)}

REGRAS GERAIS:
- Sem markdown (#, ##, **, etc.)
- T√≠tulos em MAI√öSCULAS puras
- Referencie IDs reais quando dispon√≠veis
- Nunca repita cabe√ßalhos j√° emitidos
- Se atingir o limite da resposta e ainda houver conte√∫do, finalize a frase e escreva exatamente a tag CONTINUAR## ao final
"""

        secoes_alvo = [
            ("RELAT√ìRIO", 1400, True),
            ("FUNDAMENTA√á√ÉO - LIMITA√á√ÉO DOS VALORES", 800, False),
            ("FUNDAMENTA√á√ÉO - PROVID√äNCIA SANEADORA - LEI 13.467/2017", 700, False),
            ("FUNDAMENTA√á√ÉO - CCT APLIC√ÅVEL", 900, False),
            ("FUNDAMENTA√á√ÉO - JORNADA ‚Äì HORAS EXTRAS ‚Äì DOMINGOS E FERIADOS", 1200, False),
            ("FUNDAMENTA√á√ÉO - INTERVALO INTRAJORNADA", 700, False),
            ("FUNDAMENTA√á√ÉO - INTERVALOS INTERJORNADA E INTERSEMANAL", 900, False),
            ("FUNDAMENTA√á√ÉO - TEMPO DE ESPERA", 900, False),
            ("FUNDAMENTA√á√ÉO - PARTICIPA√á√ÉO NOS RESULTADOS (PLR)", 700, False),
            ("FUNDAMENTA√á√ÉO - DIFEREN√áAS DE DI√ÅRIAS ‚Äì AJUDA DE CUSTOS", 900, False),
            ("FUNDAMENTA√á√ÉO - MULTA CONVENCIONAL", 600, False),
            ("FUNDAMENTA√á√ÉO - DESCONTOS INDEVIDOS", 700, False),
            ("FUNDAMENTA√á√ÉO - NULIDADE DA DISPENSA ‚Äì REINTEGRA√á√ÉO", 900, False),
            ("FUNDAMENTA√á√ÉO - INDENIZA√á√ÉO POR DANOS MORAIS", 900, False),
            ("FUNDAMENTA√á√ÉO - FGTS", 600, False),
            ("FUNDAMENTA√á√ÉO - JUSTI√áA GRATUITA", 500, False),
            ("FUNDAMENTA√á√ÉO - HONOR√ÅRIOS ADVOCAT√çCIOS", 600, False),
            ("FUNDAMENTA√á√ÉO - CONTRIBUI√á√ïES SOCIAIS E FISCAIS", 700, False),
            ("FUNDAMENTA√á√ÉO - CORRE√á√ÉO MONET√ÅRIA E JUROS DE MORA", 700, False),
            ("DISPOSITIVO", 1600, False),
        ]

        partes = []

        # Cabe√ßalho SENTEN√áA e transi√ß√£o padr√£o
        partes.append("SENTEN√áA\n")

        for nome_secao, alvo_chars, inserir_transicao_relatorio in secoes_alvo:
            texto_secao = self._gerar_secao_com_continuacao(
                contexto_comum=contexto_comum,
                nome_secao=nome_secao,
                alvo_caracteres=alvo_chars,
                max_iter=12
            )

            if inserir_transicao_relatorio:
                # Garantir a frase de transi√ß√£o ao final do RELAT√ìRIO
                if "√â o relat√≥rio. Decide-se." not in texto_secao:
                    texto_secao = texto_secao.rstrip() + "\n\n√â o relat√≥rio. Decide-se.\n"

            partes.append(texto_secao.strip() + "\n\n")

        texto_final = "".join(partes).strip()

        # Garantir alvo total aproximado
        if len(texto_final) < alvo_caracteres_total:
            # Complementar DISPOSITIVO com continua√ß√£o se necess√°rio
            complemento = self._gerar_secao_com_continuacao(
                contexto_comum=contexto_comum,
                nome_secao="DISPOSITIVO (COMPLEMENTO)",
                alvo_caracteres=(alvo_caracteres_total - len(texto_final)) + 400,
                max_iter=6
            )
            texto_final = (texto_final + "\n" + complemento).strip()

        return texto_final

    def _gerar_secao_com_continuacao(self,
                                     contexto_comum: str,
                                     nome_secao: str,
                                     alvo_caracteres: int,
                                     max_iter: int = 10) -> str:
        """
        Gera uma se√ß√£o com m√∫ltiplas chamadas ao Claude, usando a tag CONTINUAR## para continuar
        exatamente do ponto em que parou, at√© atingir o alvo de caracteres.
        """
        acumulado = ""
        iteracoes = 0
        continuar = True

        while continuar and iteracoes < max_iter:
            iteracoes += 1

            tail = acumulado[-1000:] if acumulado else ""
            instrucao = (
                f"Escreva APENAS a se√ß√£o '{nome_secao}' da senten√ßa trabalhista. "
                f"Sem markdown. T√≠tulo em MAI√öSCULAS. N√£o repita cabe√ßalhos anteriores. "
                f"Se a resposta atingir o limite, finalize a frase e escreva CONTINUAR## ao final."
            )

            if acumulado:
                instrucao += (
                    " CONTINUE exatamente de onde parou, sem recapitular e sem reescrever t√≠tulos. "
                    "Retome do trecho final abaixo e prossiga: \n\n" + tail
                )

            if iteracoes == 1:
                user_content = f"""
{contexto_comum}

INSTRU√á√ÉO ESPEC√çFICA:
{instrucao}
"""
            else:
                user_content = f"""
INSTRU√á√ÉO ESPEC√çFICA (CONTINUA√á√ÉO DA MESMA SE√á√ÉO):
{instrucao}
"""

            response = self._claude_request(
                system=self.claude.system_prompt,
                user=user_content,
                max_tokens=self.claude.max_tokens,
                temperature=self.claude.temperature
            )

            texto = response.content[0].text if response and response.content else ""

            # Remover a tag de continua√ß√£o caso venha no meio
            texto = texto.replace("CONTINUAR##", "").rstrip()

            # Evitar duplica√ß√£o de cabe√ßalho quando o modelo insiste em repetir
            if acumulado and texto:
                # Se os primeiros 120 caracteres novos j√° aparecem no final do acumulado, corte
                prefix = texto[:120]
                if prefix and prefix in acumulado[-500:]:
                    # Encontrar a primeira posi√ß√£o desse prefix no final e cortar antes dele
                    pos = acumulado.rfind(prefix)
                    if pos != -1:
                        texto = texto[len(prefix):].lstrip()

            acumulado += ("\n" if acumulado and not acumulado.endswith("\n") else "") + texto

            # Crit√©rios de parada
            if len(acumulado) >= alvo_caracteres:
                continuar = False
                break

            # Heur√≠stica: se o modelo gerou pouco texto, ainda assim tente mais algumas vezes
            if not texto or len(texto) < 300:
                # pequena pausa l√≥gica: apenas mais uma itera√ß√£o extra
                continue

        # Sanitiza√ß√£o final: remover duplas quebras excessivas
        return acumulado.strip()

    def _claude_request(self, system: str, user: str, max_tokens: int, temperature: float):
        """Executa chamada ao Claude com retries exponenciais e jitter em caso de rate limit (429)."""
        max_retries = 6
        base_backoff = 0.8
        for attempt in range(max_retries):
            try:
                resp = self.claude.client.messages.create(
                    model=self.claude.model,
                    max_tokens=max_tokens,
                    temperature=temperature,
                    system=system,
                    messages=[{"role": "user", "content": user}]
                )
                # Pausa leve para respeitar limites de acelera√ß√£o de tokens/min
                time.sleep(0.6)
                return resp
            except Exception as e:
                msg = str(e).lower()
                if "429" in msg or "rate limit" in msg or "acceleration limit" in msg:
                    sleep_s = base_backoff * (2 ** attempt) + random.uniform(0.0, 0.5)
                    self.logger.warning(f"Rate limit detectado (tentativa {attempt+1}/{max_retries}). Aguardando {sleep_s:.2f}s para retry.")
                    time.sleep(sleep_s)
                    continue
                raise
        # √öltima tentativa sem backoff adicional
        return self.claude.client.messages.create(
            model=self.claude.model,
            max_tokens=max_tokens,
            temperature=temperature,
            system=system,
            messages=[{"role": "user", "content": user}]
        )
