"""
Teste Completo do RAG Aprimorado
Valida chunking sem√¢ntico, embeddings otimizados e recupera√ß√£o contextual
"""

import json
import time
from pathlib import Path
from services.enhanced_rag_service import EnhancedRAGService
from services.contextual_retriever import QueryType
from services.gemini_processor import ProcessoEstruturado, ParteProcesso, PedidoProcesso, FatoRelevante

def create_test_sentence():
    """Cria senten√ßa de exemplo para teste do estilo"""
    return """
RELAT√ìRIO

Trata-se de reclama√ß√£o trabalhista ajuizada por JO√ÉO DA SILVA contra EMPRESA XYZ LTDA, 
pleiteando o pagamento de horas extras, adicional noturno, verbas rescis√≥rias e danos morais.

O reclamante alega que laborava das 22h √†s 6h, sem o devido pagamento do adicional noturno,
e que prestava horas extras habitualmente sem a devida remunera√ß√£o.

A reclamada, em sua contesta√ß√£o, nega os fatos alegados e sustenta que o controle de ponto
era rigorosamente observado, n√£o havendo horas extras a serem pagas.

FUNDAMENTA√á√ÉO

Passo ao exame das quest√µes controvertidas.

Das horas extras

O artigo 7¬∫, inciso XVI, da Constitui√ß√£o Federal assegura o direito √† remunera√ß√£o do servi√ßo 
extraordin√°rio superior, no m√≠nimo, em cinquenta por cento √† do normal.

A S√∫mula 338 do TST estabelece que a jornada de trabalho deve ser comprovada pelo empregador,
cabendo a ele o √¥nus da prova quanto aos registros de frequ√™ncia.

Analisando a prova dos autos, verifico que os cart√µes de ponto apresentados demonstram
jornada habitual das 8h √†s 18h, configurando duas horas extras di√°rias.

Do adicional noturno

O artigo 73 da CLT estabelece que o trabalho noturno deve ser remunerado com adicional
de no m√≠nimo 20% sobre a hora diurna.

Restou comprovado nos autos que o reclamante laborava no per√≠odo noturno sem o devido adicional.

DISPOSITIVO

Posto isto, JULGO PROCEDENTES EM PARTE os pedidos formulados na inicial para:

1. CONDENAR a reclamada ao pagamento de horas extras no per√≠odo de janeiro/2022 a dezembro/2023;
2. CONDENAR a reclamada ao pagamento do adicional noturno no mesmo per√≠odo;
3. JULGAR IMPROCEDENTE o pedido de danos morais por aus√™ncia de comprova√ß√£o.

Custas pela reclamada. Sem honor√°rios advocat√≠cios por aus√™ncia dos requisitos legais.
"""

def create_test_processo():
    """Cria processo estruturado para teste"""
    return ProcessoEstruturado(
        numero_processo="0001234-56.2023.5.09.0010",
        partes=[
            ParteProcesso(nome="Jo√£o da Silva", tipo="reclamante", qualificacao="Operador"),
            ParteProcesso(nome="Empresa XYZ Ltda", tipo="reclamada", qualificacao="Pessoa Jur√≠dica")
        ],
        pedidos=[
            PedidoProcesso(descricao="Horas extras", categoria="verbas", valor_estimado="R$ 5.000,00"),
            PedidoProcesso(descricao="Adicional noturno", categoria="verbas", valor_estimado="R$ 3.000,00"),
            PedidoProcesso(descricao="Danos morais", categoria="indenizacao", valor_estimado="R$ 10.000,00")
        ],
        fatos_relevantes=[
            FatoRelevante(descricao="Trabalho noturno sem adicional", fonte="inicial"),
            FatoRelevante(descricao="Horas extras habituais", fonte="inicial")
        ],
        periodo_contratual="01/2022 a 12/2023",
        valor_causa="R$ 18.000,00",
        competencia="9¬™ Vara do Trabalho",
        jurisprudencias_citadas=["S√∫mula 338 TST"],
        decisao_final=None,
        fundamentacao_resumida=None
    )

def test_embedding_optimization():
    """Testa embeddings otimizados"""
    print("üß† TESTE 1: Embeddings Otimizados")
    print("=" * 50)
    
    rag = EnhancedRAGService("test_enhanced_001")
    
    # Textos jur√≠dicos de teste
    test_texts = [
        "O reclamante tem direito a horas extras conforme artigo 7¬∫ da CF",
        "A S√∫mula 338 do TST trata do √¥nus da prova dos registros de ponto",
        "Julgo procedente o pedido de adicional noturno conforme CLT",
        "Testemunha confirmou trabalho habitual ap√≥s 18h"
    ]
    
    print("\\nüìù Criando embeddings...")
    start_time = time.time()
    
    embedding_results = rag.embedding_service.create_batch_embeddings(test_texts)
    
    elapsed = time.time() - start_time
    print(f"‚è±Ô∏è Tempo para {len(test_texts)} embeddings: {elapsed:.2f}s")
    
    for i, result in enumerate(embedding_results):
        print(f"\\n{i+1}. Texto: {test_texts[i][:50]}...")
        print(f"   Categoria: {result.semantic_category}")
        print(f"   Conceitos: {result.legal_concepts}")
        print(f"   Confian√ßa: {result.confidence:.3f}")
    
    print("\\n‚úÖ Teste de embeddings conclu√≠do!")
    return True

def test_semantic_chunking():
    """Testa chunking sem√¢ntico"""
    print("\\nüî™ TESTE 2: Chunking Sem√¢ntico")
    print("=" * 50)
    
    rag = EnhancedRAGService("test_enhanced_002")
    
    # Texto longo para chunking
    sentence_text = create_test_sentence()
    
    print("\\nüìÑ Aplicando chunking sem√¢ntico...")
    chunks = rag.chunker.create_chunks(sentence_text, "Senten√ßa Teste")
    
    print(f"\\nüìä Resultados: {len(chunks)} chunks criados")
    
    for i, chunk in enumerate(chunks):
        print(f"\\n--- Chunk {i+1} ---")
        print(f"Tipo: {chunk.chunk_type.value}")
        print(f"Prioridade: {chunk.priority}/10")
        print(f"Conceitos: {chunk.key_concepts}")
        print(f"Refer√™ncias: {chunk.legal_references}")
        if chunk.section_title:
            print(f"Se√ß√£o: {chunk.section_title}")
        print(f"Conte√∫do: {chunk.content[:100]}...")
    
    print("\\n‚úÖ Teste de chunking conclu√≠do!")
    return chunks

def test_contextual_retrieval():
    """Testa recupera√ß√£o contextual"""
    print("\\nüéØ TESTE 3: Recupera√ß√£o Contextual")
    print("=" * 50)
    
    rag = EnhancedRAGService("test_enhanced_003")
    
    # Inicializar com conhecimento
    sentence_examples = [create_test_sentence()]
    rag.initialize_judge_style(sentence_examples)
    
    processo = create_test_processo()
    transcricao = "Testemunha confirmou que trabalhava at√© 20h todos os dias, com frequentes horas extras."
    rag.save_case_knowledge(processo, transcricao)
    
    # Queries de teste
    test_queries = [
        ("Como calcular horas extras?", QueryType.FUNDAMENTACAO_LEGAL),
        ("O que disse a testemunha sobre hor√°rios?", QueryType.ANALISE_FATOS),
        ("Qual a estrutura do dispositivo da senten√ßa?", QueryType.ESTRUTURA_SENTENCA),
        ("S√∫mulas sobre controle de ponto", QueryType.BUSCA_JURISPRUDENCIA)
    ]
    
    for query, query_type in test_queries:
        print(f"\\nüîç Query: '{query}' | Tipo: {query_type.value}")
        
        results = rag.query_knowledge(
            query=query,
            query_type=query_type,
            top_k=3,
            include_explanation=True
        )
        
        print(f"üìä Resultados: {results['total_results']}")
        
        for i, result in enumerate(results['results'][:2], 1):
            print(f"\\n  {i}. Score: {result['relevance_score']:.3f} | {result['chunk_type']}")
            print(f"     Conceitos: {result['key_concepts']}")
            print(f"     Conte√∫do: {result['content'][:80]}...")
    
    print("\\n‚úÖ Teste de recupera√ß√£o conclu√≠do!")
    return True

def test_dialogue_context():
    """Testa contexto de di√°logo"""
    print("\\nüí¨ TESTE 4: Contexto de Di√°logo")
    print("=" * 50)
    
    rag = EnhancedRAGService("test_enhanced_004")
    
    # Simular di√°logo Claude-Gemini
    dialogue_steps = [
        ("Quais s√£o os fatos principais do caso?", "O reclamante trabalhou de 01/2022 a 12/2023, alegando horas extras e adicional noturno n√£o pagos."),
        ("Que provas existem para horas extras?", "Cart√µes de ponto demonstram jornada das 8h √†s 18h habitualmente, configurando 2h extras di√°rias."),
        ("Qual a fundamenta√ß√£o legal aplic√°vel?", "Art. 7¬∫, XVI da CF e S√∫mula 338 TST sobre √¥nus da prova dos registros de frequ√™ncia.")
    ]
    
    for step, (question, answer) in enumerate(dialogue_steps, 1):
        print(f"\\nüí≠ Salvando di√°logo etapa {step}...")
        rag.save_dialogue_context(question, answer, step)
    
    # Testar recupera√ß√£o do contexto
    context_query = "O que foi discutido sobre provas de horas extras?"
    
    print(f"\\nüîç Consultando contexto: '{context_query}'")
    results = rag.query_knowledge(
        query=context_query,
        sources=["dialogo_contexto"],
        top_k=2
    )
    
    print(f"üìä Contexto encontrado: {results['total_results']} resultados")
    
    for result in results['results']:
        print(f"\\n- Score: {result['relevance_score']:.3f}")
        print(f"  Conte√∫do: {result['content'][:100]}...")
    
    print("\\n‚úÖ Teste de contexto conclu√≠do!")
    return True

def test_performance():
    """Testa performance do sistema"""
    print("\\n‚ö° TESTE 5: Performance")
    print("=" * 50)
    
    rag = EnhancedRAGService("test_enhanced_005")
    
    # Inicializa√ß√£o
    start_time = time.time()
    sentence_examples = [create_test_sentence() * 3]  # Texto maior
    rag.initialize_judge_style(sentence_examples)
    init_time = time.time() - start_time
    
    # Salvamento de caso
    start_time = time.time()
    processo = create_test_processo()
    transcricao = "Depoimento longo com muitos detalhes sobre hor√°rios e condi√ß√µes de trabalho..." * 10
    rag.save_case_knowledge(processo, transcricao)
    save_time = time.time() - start_time
    
    # Queries m√∫ltiplas
    start_time = time.time()
    queries = ["horas extras", "adicional noturno", "testemunha", "s√∫mula", "fundamenta√ß√£o"] * 5
    
    for query in queries:
        rag.query_knowledge(query, top_k=5)
    
    query_time = time.time() - start_time
    
    # Estat√≠sticas
    stats = rag.get_statistics()
    
    print(f"\\nüìä Resultados de Performance:")
    print(f"‚è±Ô∏è Inicializa√ß√£o: {init_time:.2f}s")
    print(f"‚è±Ô∏è Salvamento: {save_time:.2f}s")
    print(f"‚è±Ô∏è {len(queries)} queries: {query_time:.2f}s ({query_time/len(queries):.3f}s/query)")
    
    print(f"\\nüìà Estat√≠sticas:")
    for collection, data in stats["collections"].items():
        print(f"  {collection}: {data['chunk_count']} chunks ({data['status']})")
    
    print("\\n‚úÖ Teste de performance conclu√≠do!")
    return True

def main():
    """Executa todos os testes do RAG aprimorado"""
    print("üöÄ TESTANDO RAG APRIMORADO - PARTE B")
    print("=" * 60)
    
    try:
        # Executar testes
        test_embedding_optimization()
        test_semantic_chunking()
        test_contextual_retrieval()
        test_dialogue_context()
        test_performance()
        
        print("\\nüéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!")
        print("‚úÖ RAG Otimizado e Contextual est√° funcionando perfeitamente")
        
    except Exception as e:
        print(f"\\n‚ùå ERRO NOS TESTES: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return False
    
    return True

if __name__ == "__main__":
    main()
