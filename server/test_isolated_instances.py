"""
Teste para validar gest√£o de inst√¢ncias isoladas
Verifica se o isolamento est√° funcionando corretamente
"""

import json
import time
from pathlib import Path
from services.instance_manager import InstanceManager
from services.isolated_rag_service import IsolatedRAGService
from services.gemini_processor import ProcessoEstruturado, ParteProcesso, PedidoProcesso, FatoRelevante

def test_instance_creation():
    """Testa cria√ß√£o de inst√¢ncias isoladas"""
    print("üß™ TESTE 1: Cria√ß√£o de Inst√¢ncias Isoladas")
    print("=" * 50)
    
    instance_manager = InstanceManager()
    
    # Criar duas inst√¢ncias diferentes
    case_ids = ["test_case_001", "test_case_002"]
    
    for case_id in case_ids:
        try:
            print(f"\nüìã Criando inst√¢ncia: {case_id}")
            
            # Criar inst√¢ncia
            instance_info = instance_manager.create_isolated_instance(case_id)
            
            print(f"‚úÖ Inst√¢ncia criada: {instance_info['namespace']}")
            print(f"üìÅ Diret√≥rios: {len(instance_info['directories'])} criados")
            
            # Validar isolamento
            validation = instance_manager.validate_isolation(case_id)
            print(f"üîí Valida√ß√£o de isolamento:")
            for check, result in validation.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"   {status} {check}: {result}")
            
        except Exception as e:
            print(f"‚ùå Erro ao criar inst√¢ncia {case_id}: {str(e)}")
    
    # Listar inst√¢ncias ativas
    print(f"\nüìä Inst√¢ncias ativas:")
    instances = instance_manager.list_active_instances()
    for instance in instances:
        print(f"   - {instance['case_id']} (criada em {instance['created_at']})")
    
    print("\n‚úÖ TESTE 1 CONCLU√çDO\n")

def test_isolated_rag():
    """Testa RAG isolado por inst√¢ncia"""
    print("üß™ TESTE 2: RAG Isolado por Inst√¢ncia")
    print("=" * 50)
    
    case_ids = ["test_case_001", "test_case_002"]
    
    # Criar dados de teste diferentes para cada caso
    test_data = {
        "test_case_001": {
            "numero": "0001234-56.2023.5.09.0010",
            "partes": [
                {"nome": "Jo√£o Silva", "tipo": "requerente"},
                {"nome": "Empresa A Ltda", "tipo": "requerida"}
            ],
            "pedidos": [
                {"descricao": "Horas extras", "categoria": "verbas"},
                {"descricao": "Dano moral", "categoria": "indenizacao"}
            ]
        },
        "test_case_002": {
            "numero": "0007890-12.2023.5.09.0020",
            "partes": [
                {"nome": "Maria Santos", "tipo": "requerente"},
                {"nome": "Empresa B S.A.", "tipo": "requerida"}
            ],
            "pedidos": [
                {"descricao": "Verbas rescis√≥rias", "categoria": "rescisao"},
                {"descricao": "Intervalo intrajornada", "categoria": "jornada"}
            ]
        }
    }
    
    rag_services = {}
    
    # Inicializar RAG para cada inst√¢ncia
    for case_id in case_ids:
        try:
            print(f"\nüìã Inicializando RAG para: {case_id}")
            
            # Criar RAG isolado
            rag_service = IsolatedRAGService(case_id)
            rag_services[case_id] = rag_service
            
            # Criar processo estruturado de teste
            data = test_data[case_id]
            processo_estruturado = ProcessoEstruturado(
                numero_processo=data["numero"],
                partes=[
                    ParteProcesso(nome=p["nome"], tipo=p["tipo"], qualificacao="")
                    for p in data["partes"]
                ],
                pedidos=[
                    PedidoProcesso(descricao=p["descricao"], categoria=p["categoria"], valor_estimado="")
                    for p in data["pedidos"]
                ],
                fatos_relevantes=[
                    FatoRelevante(descricao="Fato teste", fonte="inicial")
                ],
                periodo_contratual="01/2022 a 12/2023",
                valor_causa="R$ 10.000,00",
                competencia="5¬™ Vara do Trabalho",
                jurisprudencias_citadas=[],
                decisao_final=None,
                fundamentacao_resumida=None
            )
            
            # Salvar conhecimento do caso
            rag_service.salvar_conhecimento_caso_isolado(processo_estruturado)
            
            print(f"‚úÖ Conhecimento salvo para {case_id}")
            
            # Salvar contexto de di√°logo de teste
            dialogo_teste = {
                "etapa": "teste",
                "perguntas_claude": ["Qual o per√≠odo contratual?", "Quais os pedidos?"],
                "respostas_gemini": {
                    "periodo": data["numero"],
                    "pedidos": [p["descricao"] for p in data["pedidos"]]
                }
            }
            
            rag_service.salvar_contexto_dialogo("etapa1", dialogo_teste)
            
            print(f"‚úÖ Di√°logo salvo para {case_id}")
            
        except Exception as e:
            print(f"‚ùå Erro no RAG para {case_id}: {str(e)}")
    
    print("\nüìä Testando recupera√ß√£o isolada:")
    
    # Testar recupera√ß√£o isolada
    for case_id in case_ids:
        if case_id in rag_services:
            try:
                print(f"\nüîç Recuperando conhecimento de {case_id}:")
                
                conhecimento = rag_services[case_id].recuperar_conhecimento_completo_isolado()
                
                # Verificar se cont√©m apenas dados desta inst√¢ncia
                if "conhecimento_caso" in conhecimento and "detalhes" in conhecimento["conhecimento_caso"]:
                    detalhes = conhecimento["conhecimento_caso"]["detalhes"]
                    numero_processo = detalhes.get("processo", {}).get("numero", "N/A")
                    print(f"   üìã Processo: {numero_processo}")
                    
                    # Verificar se √© o processo correto
                    esperado = test_data[case_id]["numero"]
                    if numero_processo == esperado:
                        print(f"   ‚úÖ Isolamento correto: {numero_processo}")
                    else:
                        print(f"   ‚ùå Contamina√ß√£o detectada: esperado {esperado}, obtido {numero_processo}")
                
                # Testar busca contextual
                resultados = rag_services[case_id].buscar_contexto_relevante("horas extras", "all", 3)
                print(f"   üîç Busca 'horas extras': {len(resultados)} resultados")
                
                for resultado in resultados:
                    categoria = resultado['categoria']
                    relevancia = resultado['relevancia']
                    print(f"      - {categoria}: relev√¢ncia {relevancia:.3f}")
                
            except Exception as e:
                print(f"‚ùå Erro na recupera√ß√£o de {case_id}: {str(e)}")
    
    print("\n‚úÖ TESTE 2 CONCLU√çDO\n")

def test_cross_contamination():
    """Testa se h√° contamina√ß√£o entre inst√¢ncias"""
    print("üß™ TESTE 3: Verifica√ß√£o de Contamina√ß√£o Cruzada")
    print("=" * 50)
    
    case_ids = ["test_case_001", "test_case_002"]
    
    # Buscar por termos espec√≠ficos de cada caso em inst√¢ncias diferentes
    test_queries = {
        "test_case_001": "Jo√£o Silva",  # Nome espec√≠fico do caso 1
        "test_case_002": "Maria Santos"  # Nome espec√≠fico do caso 2
    }
    
    print("üîç Testando busca cruzada (n√£o deve encontrar resultados):")
    
    for search_case_id in case_ids:
        for query_case_id in case_ids:
            if search_case_id != query_case_id:  # Buscar termo de outro caso
                try:
                    rag_service = IsolatedRAGService(search_case_id)
                    query = test_queries[query_case_id]
                    
                    resultados = rag_service.buscar_contexto_relevante(query, "all", 5)
                    
                    if len(resultados) == 0:
                        print(f"   ‚úÖ {search_case_id} n√£o encontrou '{query}' (correto)")
                    else:
                        print(f"   ‚ùå {search_case_id} encontrou '{query}' - CONTAMINA√á√ÉO!")
                        for resultado in resultados:
                            print(f"      - {resultado['categoria']}: {resultado['relevancia']:.3f}")
                
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Erro na busca cruzada: {str(e)}")
    
    print("\n‚úÖ TESTE 3 CONCLU√çDO\n")

def test_performance():
    """Testa performance das opera√ß√µes isoladas"""
    print("üß™ TESTE 4: Performance das Opera√ß√µes")
    print("=" * 50)
    
    case_id = "test_performance"
    
    try:
        # Medir tempo de cria√ß√£o de inst√¢ncia
        start_time = time.time()
        instance_manager = InstanceManager()
        instance_manager.create_isolated_instance(case_id)
        creation_time = time.time() - start_time
        
        print(f"‚è±Ô∏è Cria√ß√£o de inst√¢ncia: {creation_time:.2f} segundos")
        
        # Medir tempo de inicializa√ß√£o RAG
        start_time = time.time()
        rag_service = IsolatedRAGService(case_id)
        rag_init_time = time.time() - start_time
        
        print(f"‚è±Ô∏è Inicializa√ß√£o RAG: {rag_init_time:.2f} segundos")
        
        # Medir tempo de busca
        start_time = time.time()
        resultados = rag_service.buscar_contexto_relevante("teste performance", "all", 5)
        search_time = time.time() - start_time
        
        print(f"‚è±Ô∏è Busca contextual: {search_time:.3f} segundos")
        
        # Verificar limites de performance
        limits = {
            "creation_time": 30.0,  # m√°ximo 30 segundos
            "rag_init_time": 10.0,  # m√°ximo 10 segundos
            "search_time": 5.0       # m√°ximo 5 segundos
        }
        
        times = {
            "creation_time": creation_time,
            "rag_init_time": rag_init_time,
            "search_time": search_time
        }
        
        print("\nüìä Avalia√ß√£o de performance:")
        for metric, time_taken in times.items():
            limit = limits[metric]
            status = "‚úÖ" if time_taken <= limit else "‚ùå"
            print(f"   {status} {metric}: {time_taken:.3f}s (limite: {limit}s)")
        
    except Exception as e:
        print(f"‚ùå Erro no teste de performance: {str(e)}")
    
    print("\n‚úÖ TESTE 4 CONCLU√çDO\n")

def test_cleanup():
    """Testa limpeza de inst√¢ncias"""
    print("üß™ TESTE 5: Limpeza de Inst√¢ncias")
    print("=" * 50)
    
    instance_manager = InstanceManager()
    
    # Listar inst√¢ncias antes da limpeza
    instances_before = instance_manager.list_active_instances()
    print(f"üìä Inst√¢ncias antes da limpeza: {len(instances_before)}")
    
    # Fazer cleanup for√ßado das inst√¢ncias de teste
    test_case_ids = ["test_case_001", "test_case_002", "test_performance"]
    
    for case_id in test_case_ids:
        try:
            print(f"üßπ Fazendo cleanup de {case_id}")
            instance_manager.cleanup_instance(case_id, force=True)
            print(f"‚úÖ Cleanup de {case_id} conclu√≠do")
        except Exception as e:
            print(f"‚ùå Erro no cleanup de {case_id}: {str(e)}")
    
    # Listar inst√¢ncias ap√≥s a limpeza
    instances_after = instance_manager.list_active_instances()
    print(f"üìä Inst√¢ncias ap√≥s limpeza: {len(instances_after)}")
    
    print("\n‚úÖ TESTE 5 CONCLU√çDO\n")

def run_all_tests():
    """Executa todos os testes de inst√¢ncias isoladas"""
    print("üöÄ INICIANDO TESTES DE INST√ÇNCIAS ISOLADAS")
    print("=" * 60)
    
    try:
        test_instance_creation()
        test_isolated_rag()
        test_cross_contamination()
        test_performance()
        test_cleanup()
        
        print("üéâ TODOS OS TESTES CONCLU√çDOS COM SUCESSO!")
        print("‚úÖ Gest√£o de inst√¢ncias isoladas est√° funcionando corretamente")
        
    except Exception as e:
        print(f"‚ùå ERRO GERAL NOS TESTES: {str(e)}")
        raise

if __name__ == "__main__":
    run_all_tests()
