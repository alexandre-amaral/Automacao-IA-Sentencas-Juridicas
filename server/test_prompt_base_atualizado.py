#!/usr/bin/env python3
"""
üß™ TESTE DO PROMPT BASE ATUALIZADO
Valida√ß√£o completa das 3 etapas com formata√ß√£o exata conforme especificado
"""

import asyncio
import sys
import os
from pathlib import Path
import json

# Adicionar diret√≥rio atual ao path
sys.path.append(str(Path(__file__).parent))

# Configurar logging
import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Imports dos servi√ßos
from services.intelligent_dialogue_service import IntelligentDialogueService

async def test_prompt_base_completo():
    """
    Teste completo do prompt base atualizado com as 3 etapas
    """
    
    print("üéØ TESTE DO PROMPT BASE ATUALIZADO (100% CONFORME ESPECIFICADO)")
    print("=" * 80)
    
    # ID de caso de teste
    case_id = "test_prompt_atualizado_2024"
    
    # Texto de processo mais realista
    texto_processo_completo = """
    EXCELENT√çSSIMO SENHOR DOUTOR JUIZ DO TRABALHO DA VARA DO TRABALHO DE SALVADOR/BA
    
    PETI√á√ÉO INICIAL
    
    JO√ÉO SILVA SANTOS, brasileiro, motorista, portador da CTPS n¬∫ 123456, s√©rie 123-BA, 
    CPF n¬∫ 123.456.789-00, residente e domiciliado na Rua das Flores, 123, Salvador/BA, 
    vem respeitosamente perante V. Exa. ajuizar a presente
    
    RECLAMA√á√ÉO TRABALHISTA
    
    em face de TRANSPORTADORA ABC LTDA., pessoa jur√≠dica de direito privado, CNPJ n¬∫ 
    12.345.678/0001-90, com sede na Av. Principal, 456, Salvador/BA, pelos fatos e 
    fundamentos jur√≠dicos a seguir expostos:
    
    I - DOS FATOS
    
    O reclamante foi admitido em 01/02/2021, exercendo a fun√ß√£o de motorista carreteiro, 
    com sal√°rio de R$ 3.500,00, sendo dispensado sem justa causa em 15/05/2023.
    
    Durante todo o per√≠odo contratual, o reclamante cumpria jornada das 06h00 √†s 18h00, 
    de segunda a sexta-feira, com apenas 30 minutos para almo√ßo, totalizando 11h30 de 
    trabalho di√°rio.
    
    II - DOS PEDIDOS
    
    1. PRELIMINAR DE INCOMPET√äNCIA DA JUSTI√áA DO TRABALHO
    2. HORAS EXTRAS com adicional de 50% 
    3. INTERVALOS INTRAJORNADA n√£o concedidos
    4. ADICIONAL NOTURNO de 20%
    5. INDENIZA√á√ÉO POR DANOS MORAIS no valor de R$ 15.000,00
    6. GRATUIDADE DA JUSTI√áA
    
    Valor da causa: R$ 50.000,00
    
    CONTESTA√á√ÉO DA RECLAMADA
    
    A TRANSPORTADORA ABC LTDA. vem respeitosamente contestar a presente reclama√ß√£o:
    
    PRELIMINAR DE INCOMPET√äNCIA
    Alega que a Justi√ßa do Trabalho n√£o tem compet√™ncia para julgar acidentes de tr√¢nsito.
    
    M√âRITO
    
    1. HORAS EXTRAS: Nega a presta√ß√£o de horas extras, sustentando que o reclamante 
       cumpria jornada normal de 8 horas di√°rias com controle eletr√¥nico.
    
    2. INTERVALOS: Afirma que o intervalo de 1 hora era regularmente concedido.
    
    3. ADICIONAL NOTURNO: Nega trabalho noturno habitual.
    
    4. DANOS MORAIS: Inexist√™ncia de ato il√≠cito ou dano moral.
    
    R√âPLICA
    
    O reclamante impugna a contesta√ß√£o, reiterando que:
    - Trabalhou efetivamente em sobrejornada
    - O intervalo era reduzido para 30 minutos
    - Realizava trabalho noturno quando necess√°rio
    - Sofreu ass√©dio moral por parte do supervisor
    """
    
    # Transcri√ß√£o de audi√™ncia mais detalhada
    transcricao_audiencia_completa = """
    TRIBUNAL REGIONAL DO TRABALHO DA 5¬™ REGI√ÉO
    VARA DO TRABALHO DE SALVADOR
    
    ATA DE AUDI√äNCIA DE INSTRU√á√ÉO E JULGAMENTO
    
    Processo: 0000123-45.2023.5.05.0001
    Reclamante: JO√ÉO SILVA SANTOS
    Reclamada: TRANSPORTADORA ABC LTDA.
    
    DEPOIMENTO PESSOAL DO RECLAMANTE JO√ÉO SILVA SANTOS:
    
    "Trabalhei na empresa de fevereiro de 2021 at√© maio de 2023. Minha fun√ß√£o era motorista 
    carreteiro. Ganhava R$ 3.500,00 por m√™s. Meu hor√°rio era das 6h √†s 18h, de segunda a 
    sexta. O almo√ßo era de apenas 30 minutos, n√£o 1 hora como a empresa diz. Quando havia 
    entrega urgente, trabalhava at√© 22h ou 23h, mas n√£o recebia hora extra. O supervisor 
    Jos√© sempre gritava comigo na frente dos outros funcion√°rios, me chamando de lerdo e 
    incompetente. Isso me causou muito constrangimento."
    
    DEPOIMENTO DA TESTEMUNHA MARIA JOSE DOS SANTOS (arrolada pelo reclamante):
    
    "Trabalho na empresa h√° 5 anos como auxiliar administrativo. Conhe√ßo Jo√£o h√° 2 anos. 
    Vi v√°rias vezes ele chegando muito tarde, por volta das 23h. O almo√ßo dele era sempre 
    r√°pido, uns 20-30 minutos. O supervisor Jos√© realmente gritava com Jo√£o, chamava ele 
    de nomes feios na frente de todo mundo. Jo√£o ficava constrangido e triste."
    
    DEPOIMENTO DA TESTEMUNHA CARLOS PEREIRA (arrolada pela reclamada):
    
    "Sou motorista na empresa h√° 3 anos. Trabalho no mesmo setor que Jo√£o. Nosso hor√°rio 
    sempre foi das 8h √†s 17h, com 1 hora de almo√ßo. Jo√£o sa√≠a no hor√°rio normal igual a 
    todos. Nunca vi ele fazer hora extra. O supervisor Jos√© √© uma pessoa tranquila, nunca 
    vi ele gritar com ningu√©m."
    
    DEPOIMENTO DO PREPOSTO DA RECLAMADA JOS√â CARLOS SILVA:
    
    "Sou supervisor da empresa h√° 4 anos. Jo√£o trabalhava das 8h √†s 17h com 1 hora de 
    almo√ßo. Temos controle eletr√¥nico que comprova. Eventualmente precisava de entrega 
    at√© 18h, mas pag√°vamos hora extra quando necess√°rio. Jo√£o era um funcion√°rio normal, 
    nunca houve problema de relacionamento. A demiss√£o foi por conten√ß√£o de custos."
    
    CERTID√ÉO
    
    Certifico que os depoimentos acima foram colhidos oralmente e transcritos fielmente.
    """
    
    try:
        print("üìã 1. INICIALIZANDO TESTE DO PROMPT BASE ATUALIZADO...")
        dialogue_service = IntelligentDialogueService(case_id)
        
        print("\nüöÄ 2. EXECUTANDO AS 3 ETAPAS COM FORMATA√á√ÉO EXATA:")
        print("   üìå Etapa 1: Resumo sistematizado (com numera√ß√£o 1-14)")
        print("   üìå Etapa 2: An√°lise prova oral (com diretrizes especiais)")
        print("   üìå Etapa 3: Fundamenta√ß√£o guiada (com escape R\\$)")
        
        # Executar o di√°logo completo
        print("\n‚è≥ Executando di√°logo inteligente...")
        resultado = await dialogue_service.executar_dialogo_completo(
            texto_processo=texto_processo_completo,
            transcricao_audiencia=transcricao_audiencia_completa
        )
        
        print("\n‚úÖ 3. RESULTADO DO TESTE ATUALIZADO:")
        print(f"   ‚Ä¢ Case ID: {resultado['case_id']}")
        print(f"   ‚Ä¢ Etapas executadas: {len(resultado['etapas_executadas'])}")
        print(f"   ‚Ä¢ Senten√ßa gerada: {len(resultado.get('sentenca_final', ''))} caracteres")
        
        # Salvar resultado detalhado
        test_result_file = Path("test_prompt_atualizado_resultado.json")
        with open(test_result_file, 'w', encoding='utf-8') as f:
            json.dump(resultado, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ 4. RESULTADO COMPLETO SALVO EM: {test_result_file}")
        
        # Verificar conformidade com o prompt base
        print("\nüîç 5. VERIFICA√á√ÉO DE CONFORMIDADE:")
        
        # Verificar Etapa 1
        etapa_1 = None
        for etapa in resultado.get('etapas_executadas', []):
            if etapa.get('etapa') == 'ETAPA_1_RESUMO_SISTEMATIZADO':
                etapa_1 = etapa
                break
        
        if etapa_1:
            conteudo_1 = etapa_1.get('conteudo_completo', '')
            print("   ‚úÖ Etapa 1 executada")
            
            # Verificar elementos espec√≠ficos do prompt
            checks_etapa_1 = [
                ("Data do ajuizamento", "ajuizamento" in conteudo_1.lower()),
                ("Tabela de dados b√°sicos", "tabela" in conteudo_1.lower() or "|" in conteudo_1),
                ("Preliminares", "preliminar" in conteudo_1.lower()),
                ("Prejudiciais de m√©rito", "prejudicial" in conteudo_1.lower()),
                ("Separador /1¬™ Etapa/", "/1¬™ Etapa/" in conteudo_1),
                ("Exemplo de formata√ß√£o", "*da justa causa*" in conteudo_1.lower() or "*das horas extras*" in conteudo_1.lower())
            ]
            
            for check_name, check_result in checks_etapa_1:
                status = "‚úÖ" if check_result else "‚ùå"
                print(f"     {status} {check_name}")
        
        # Verificar Etapa 2
        etapa_2 = None
        for etapa in resultado.get('etapas_executadas', []):
            if etapa.get('etapa') == 'ETAPA_2_ANALISE_PROVA_ORAL':
                etapa_2 = etapa
                break
        
        if etapa_2:
            conteudo_2 = etapa_2.get('conteudo_completo', '')
            print("   ‚úÖ Etapa 2 executada")
            
            checks_etapa_2 = [
                ("Tabela de pontos controvertidos", "|" in conteudo_2 and "ponto controvertido" in conteudo_2.lower()),
                ("Relat√≥rio anal√≠tico", "anal√≠tico" in conteudo_2.lower() or "converg√™ncia" in conteudo_2.lower()),
                ("Diretrizes especiais", "conectores" in conteudo_2.lower() or "transi√ß√µes" in conteudo_2.lower()),
                ("Separador //", "//" in conteudo_2)
            ]
            
            for check_name, check_result in checks_etapa_2:
                status = "‚úÖ" if check_result else "‚ùå"
                print(f"     {status} {check_name}")
        
        # Verificar Etapa 3 e senten√ßa final
        sentenca_final = resultado.get('sentenca_final', '')
        if sentenca_final:
            print("   ‚úÖ Senten√ßa final gerada")
            
            checks_sentenca = [
                ("Escape do cifr√£o R\\$", "R\\$" in sentenca_final),
                ("Estrutura RELAT√ìRIO", "RELAT√ìRIO" in sentenca_final.upper() or "relat√≥rio" in sentenca_final.lower()),
                ("Estrutura FUNDAMENTA√á√ÉO", "FUNDAMENTA√á√ÉO" in sentenca_final.upper() or "fundamenta√ß√£o" in sentenca_final.lower()),
                ("Estrutura DISPOSITIVO", "DISPOSITIVO" in sentenca_final.upper() or "dispositivo" in sentenca_final.lower()),
                ("Cita√ß√µes legais CLT", "CLT" in sentenca_final),
                ("Formata√ß√£o Markdown ##", "##" in sentenca_final),
                ("Negrito **", "**" in sentenca_final)
            ]
            
            for check_name, check_result in checks_sentenca:
                status = "‚úÖ" if check_result else "‚ùå"
                print(f"     {status} {check_name}")
        
        # Mostrar preview da senten√ßa
        if sentenca_final:
            print("\nüìù 6. PREVIEW DA SENTEN√áA FINAL (PRIMEIROS 500 CARACTERES):")
            print("-" * 60)
            print(sentenca_final[:500] + "..." if len(sentenca_final) > 500 else sentenca_final)
            print("-" * 60)
        
        print("\nüéâ TESTE DO PROMPT BASE ATUALIZADO CONCLU√çDO!")
        print(f"üìä Estat√≠sticas:")
        print(f"   ‚Ä¢ Total de caracteres gerados: {sum(len(e.get('conteudo_completo', '')) for e in resultado.get('etapas_executadas', []))}")
        print(f"   ‚Ä¢ Senten√ßa final: {len(sentenca_final)} caracteres")
        print(f"   ‚Ä¢ Arquivo de resultado: {test_result_file}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """
    Fun√ß√£o principal do teste
    """
    
    print("üéØ VALIDADOR DO PROMPT BASE ATUALIZADO")
    print("=" * 80)
    print("Este script testa se o prompt base foi implementado EXATAMENTE")
    print("conforme especificado, incluindo:")
    print("‚Ä¢ Formata√ß√£o com asteriscos")
    print("‚Ä¢ Numera√ß√£o espec√≠fica (1-14)")
    print("‚Ä¢ Exemplos detalhados")
    print("‚Ä¢ Separadores especiais")
    print("‚Ä¢ Diretrizes de estilo")
    print("‚Ä¢ Escape do cifr√£o R\\$")
    print("=" * 80)
    
    # Executar teste
    success = asyncio.run(test_prompt_base_completo())
    
    if success:
        print("\n‚úÖ TODOS OS TESTES PASSARAM!")
        print("üìÑ O prompt base est√° implementado conforme especifica√ß√£o")
        print("üöÄ Sistema pronto para produ√ß√£o")
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM")
        print("üîß Revisar implementa√ß√£o do prompt base")

if __name__ == "__main__":
    main()


